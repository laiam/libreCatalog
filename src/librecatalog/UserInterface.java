/*
 * Name:       Team Innovation
 * Course:     CS225
 * Program:    Project Library
 * Problem:    Create a system for storing library books and patrons, provide methods
 *             for checking out books, and other library related tasks.
 * Class:      UserInterface
 */
package librecatalog;

import javax.swing.JOptionPane;

/**
 *
 * @author van
 */
public class UserInterface
{
    /**
     * main menu interface.
     * displays a graphical interface with the available options.
     * Load up the real interface its time to play with the big guns.
     */
    public static void main (String[] args) 
    {
        int userLevel = 0;
        if (args.length>0)
            for (int idx = 0; idx < args.length;idx++)
                if (args[idx].equals("--first-run")) {
                    firstRun();
                    break;
                }
        String passphrase = JOptionPane.showInputDialog("For Patron Access leave blank,"
                + "Enter System Password:");
        //I strongly advise encrypting system passphrases with a sha1 of the
        //password and a random salt right here would be one of the places to
        //encrypt the input passphrase and then compare with the stored hash.
        if ( passphrase==null || passphrase.equals("") )
            userLevel = 3;
        else if (passphrase.equals("I'm an admin"))
            userLevel = 1;
        else if (passphrase.equals("I'm a Librarian"))
            userLevel = 2;
        menu(userLevel);
        
    }

    private static void firstRun()
    {
        System.out.println("Eventually you will configure the system here.");
    }

    /**
     * The menu itself.
     * Generates a menu for the user based on which pass-phrase they entered.
     * @param prop which user level is available for menus
     */
    private static void menu(int userlevel)
    {
        String menu = "";
        switch (userlevel) {
            case 1:
                menu  = "7 = Add patron\n"
                      + "8 = Modify Patron\n"
                      + "9 = Remove Patron\n"
                      + "10 = Add Book\n"
                      + "11 = Modify Book\n"
                      + "12 = Remove Book\n"
                      + "13 = Configure System\n";
            case 2:
                menu = "4 = View and Modify Fines\n"
                     + "5 = Checkout Books\n"
                     + "6 = Return Books\n" + menu;
            case 3:
                menu  = "1 = Search Books\n"
                      + "2 = Place Hold\n"
                      + "3 = Patron Account\n" + menu;
            default:
                menu += "0 = Exit";
                
        }
        String output = "";
        String userchoice = JOptionPane.showInputDialog(null, menu);
        if ( userchoice == null || userchoice.equals("") ) userchoice = "0";
        int menuchoice = Integer.parseInt(userchoice);
        
        //each of these JOptionPanes will become their own method calling
        //information from the classes.
        while (menuchoice!=0) {
            switch (menuchoice) {
                case 0: output = "Thank you come again."; break;
                case 1: output = "You're searching books now!"; break;
                case 2: output = "You're placing a hold!"; break;
                case 3: output = "You are currently viewing a patron account"; break;
                case 4: output = "You are currently paying or removing a fine."; break;
                case 5: output = "You are currently checking out a book."; break;
                case 6: output = "You are currently returning a book."; break;
                case 7: output = "You are currently adding a patron."; break;
                case 8: output = "You are currently modifying a patron."; break;
                case 9: output = "You are currently removing a patron."; break;
                case 10: output = "You are currently adding a book."; break;
                case 11: output = "You are currently modifying a book."; break;
                case 12: output = "You are currently removing a book."; break;
                case 13: output = "You are currently configuring the system."; break;
                default: output = "You really messed up this time.";
            }
            System.out.println(output);
            JOptionPane.showMessageDialog(null, output);userchoice = JOptionPane.showInputDialog(null, menu);
            if ( userchoice == null || userchoice.equals("") ) userchoice = "0";
                menuchoice = Integer.parseInt(userchoice);
        }
    }
    
    
    /**
     * Provides for graphical error reporting.
     * @param err error code generated by program section.
     *            100 range - configuration class.
     *            200 range - GUI errors.
     *            300 range - file system errors
     */
    public static void Error(int err) {
        int type;
        String title;
        String message;
        switch(err) {
            case 101:
                message = "The configuration file was not found.";
                title = "Configuration Info";
                type = JOptionPane.WARNING_MESSAGE;
                break;
            case 102:
                message = "Unexpected file input error.";
                title = "Configuration Error";
                type = JOptionPane.ERROR_MESSAGE;
                break;
            case 201:
                message = "Error: Invalid Permission Level.";
                title = "Access Denied";
                type = JOptionPane.WARNING_MESSAGE;
                break;
            case 301:
                message = "There was an error with the patron database,\n"
                        + "The file must have been removed or is inaccessible.";
                title = "File Error";
                type = JOptionPane.ERROR_MESSAGE;
                break;
            case 302:
                message = "There was an error with the Items database,\n"
                        + "The file must have been removed or is inaccessible.";
                title = "File Error";
                type = JOptionPane.ERROR_MESSAGE;
                break;
            case 303:
                message = "There was an error with the Items Availability database,\n"
                        + "The file must have been removed or is inaccessible.";
                title = "File Error";
                type = JOptionPane.ERROR_MESSAGE;
                break;
            case 304:
                message = "There was an error with the Fines database,\n"
                        + "The file must have been removed or is inaccessible.";
                title = "File Error";
                type = JOptionPane.ERROR_MESSAGE;
                break;
            default:
                message = "Error "+err+": undefined error code generated.";
                title = "Warning";
                type = JOptionPane.WARNING_MESSAGE;
        }
        JOptionPane.showMessageDialog(null,message,title,type);
                    
    }

    /**
     * Allows for setup and reconfiguration of admin and librarian level passwords
     * in the event of a config file misplacement.
     * @return true if authentication succeeded false if it failed.
     */
    static boolean productSetupKey()
    {
        String setupPass = JOptionPane.showInputDialog("Setup mode detected please enter the product\n"
                + " product key you received with this software.");
        while (!setupPass.equals("Nova-Gamma-7even-d3lt4")) {
            setupPass = JOptionPane.showInputDialog(
                    "Unrecognized Password: Please re-enter\nthe product key"
                    + " you received with this software."
                );
            if ("".equals(setupPass))
                return false;
        }
        System.out.println("Setup mode activated.");
        return true;
    }
}
