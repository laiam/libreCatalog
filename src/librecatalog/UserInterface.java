/*
 * Name:       Team Innovation
 * Course:     CS225
 * Program:    Project Library
 * Problem:    Create a system for storing library books and patrons, provide methods
 *             for checking out books, and other library related tasks.
 * Class:      UserInterface
 */
package librecatalog;

import java.util.Scanner;
import javax.swing.JOptionPane;

/**
 *
 * @author van
 */
public class UserInterface
{
    
    /**
     * main menu interface. displays a graphical interface with the available
     * options. Load up the real interface its time to play with the big guns.
     */
    public static void main ( int userLevel )
    {
        //todo no-gui environment.
    }

    //<editor-fold defaultstate="collapsed" desc="Graphicals and Alternatives">
    /**
     * Get information from the user. Eventually we may add support for checking
     * to see if gui is enabled, for now we shall assume it is.
     *
     * @param title   title of the graphical message if gui enabled
     * @param message the message to be displayed when prompting for information
     *
     * @return the string input received from the user
     */
    public static String askUser ( String title, String message )
    {
        if ( Configure.getSetting( "no-gui" ).contains( "true" ) )
        {
            Scanner in = new Scanner( System.in );
            System.out.println( title + "\n" + message );
            return in.nextLine();
        }
        return JOptionPane.showInputDialog( null, message, title,
                                            JOptionPane.QUESTION_MESSAGE );
    }

    public static int askUserForInt ( String title, String message )
    {
        try
        {
            if ( Configure.getSetting( "no-gui" ).contains( "true" ) )
            {
                Scanner in = new Scanner( System.in );
                System.out.println( title + "\n" + message );
                int next = in.nextInt();
                in.nextLine();
                return next;
            }
            return Integer.parseInt(
                    JOptionPane.showInputDialog( null, message, title,
                                                 JOptionPane.QUESTION_MESSAGE ) );
        } catch ( NumberFormatException nfe )
        {
            return askUserForInt( title, message );
        }
    }

    /**
     * Get confirmation from the user.
     *
     * @see askUser
     * @param title   title of the graphical message.
     * @param message the message to be displayed.
     *
     * @return boolean true if ok false if cancel.
     */
    public static boolean confirm ( String title, String message )
    {
        if ( Configure.getSetting( "no-gui" ).contains( "true" ) )
        {
            Scanner in = new Scanner( System.in );
            System.out.println( title + "\n" + message + "(y or n)" );
            String next = in.nextLine().toUpperCase().charAt( 0 ) + "";
            while ( !next.equals( "Y" ) && !next.equals( "N" ) )
            {
                System.out.println( title + "\n" + message + "(y or n)" );
                next = in.nextLine().toUpperCase().charAt( 0 ) + "";
            }
            if ( next.equals( "Y" ) )
            {
                return true;
            }
            return false;
        }
        int value = JOptionPane.showConfirmDialog( null, message, title,
                                                   JOptionPane.OK_CANCEL_OPTION,
                                                   JOptionPane.QUESTION_MESSAGE );
        if ( value == JOptionPane.OK_OPTION )
        {
            return true;
        }
        return false;
    }

    /**
     * Inform the user of something.
     *
     * @param title   title of the message to be displayed if using gui
     * @param message the message to be displayed.
     */
    public static void tellUser ( String title, String message )
    {
        System.out.println( message );
        if ( Configure.getSetting( "no-gui" ).equals( "false" ) )
        {
            JOptionPane.showMessageDialog( null, message, title,
                                           JOptionPane.INFORMATION_MESSAGE );
        }
    }//end telluser
    //</editor-fold>
    
    /**
     * Provides for graphical error reporting.
     *
     * @param err error code generated by program section. 100 range -
     * configuration class. 200 range - GUI errors. 300 range - file system
     * errors
     */
    public static void Error ( int err )
    {
        int type;
        String title;
        String message;
        switch ( err )
        {
            case 101:
                message = "The configuration file was not found.";
                title = "Configuration Info";
                type = JOptionPane.WARNING_MESSAGE;
                break;
            case 102:
                message = "Unexpected file input error.";
                title = "Configuration Error";
                type = JOptionPane.ERROR_MESSAGE;
                break;
            case 201:
                message = "Error: Invalid Permission Level.";
                title = "Access Denied";
                type = JOptionPane.WARNING_MESSAGE;
                break;
            case 301:
                message = "There was an error with the patron database,\n"
                        + "The file must have been removed or is inaccessible.";
                title = "File Error";
                type = JOptionPane.ERROR_MESSAGE;
                break;
            case 302:
                message = "There was an error with the Items database,\n"
                        + "The file must have been removed or is inaccessible.";
                title = "File Error";
                type = JOptionPane.ERROR_MESSAGE;
                break;
            case 303:
                message = "There was an error with the Items Availability database,\n"
                        + "The file must have been removed or is inaccessible.";
                title = "File Error";
                type = JOptionPane.ERROR_MESSAGE;
                break;
            case 304:
                message = "There was an error with the Fines database,\n"
                        + "The file must have been removed or is inaccessible.";
                title = "File Error";
                type = JOptionPane.ERROR_MESSAGE;
                break;
            default:
                message = "Error " + err + ": undefined error code generated.";
                title = "Warning";
                type = JOptionPane.WARNING_MESSAGE;
        }
        JOptionPane.showMessageDialog( null, message, title, type );

    }
}
